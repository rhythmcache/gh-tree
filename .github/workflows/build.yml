name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - riscv64gc-unknown-linux-musl
        include:
          - target: x86_64-unknown-linux-musl
            toolchain_url: ""  # Uses native toolchain from GitHub Actions
          - target: i686-unknown-linux-musl
            toolchain_url: "https://musl.cc/i686-linux-musl-cross.tgz"
          - target: aarch64-unknown-linux-musl
            toolchain_url: "https://musl.cc/aarch64-linux-musl-cross.tgz"
          - target: armv7-unknown-linux-musleabihf
            toolchain_url: "https://musl.cc/armv7l-linux-musleabihf-cross.tgz"
          - target: riscv64gc-unknown-linux-musl
            toolchain_url: "https://musl.cc/riscv64-linux-musl-cross.tgz"

    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Set up cross compiler
      if: matrix.toolchain_url != ''
      run: |
        mkdir -p "$HOME/musl-cross"
        curl -L "${{ matrix.toolchain_url }}" | tar xz -C "$HOME/musl-cross" --strip-components=1
        echo "$HOME/musl-cross/bin" >> $GITHUB_PATH

    - name: Configure cargo for cross-compilation
      run: |
        mkdir -p .cargo
        cat > .cargo/config.toml << EOF
        [target.${{ matrix.target }}]
        linker = "${{ matrix.target == 'x86_64-unknown-linux-musl' && 'cc' || 
          matrix.target == 'i686-unknown-linux-musl' && 'i686-linux-musl-gcc' || 
          matrix.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-musl-gcc' || 
          matrix.target == 'armv7-unknown-linux-musleabihf' && 'armv7l-linux-musleabihf-gcc' || 
          matrix.target == 'riscv64gc-unknown-linux-musl' && 'riscv64-linux-musl-gcc' }}"
        rustflags = ["-C", "target-feature=+crt-static"]
        EOF

    - name: Build gh-tree
      run: |
        cd gh-tree
        cargo build --release --target ${{ matrix.target }}

    - name: Build ghrls
      run: |
        cd ghrls
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/${{ matrix.target }}
        cp gh-tree/target/${{ matrix.target }}/release/gh-tree artifacts/${{ matrix.target }}/
        cp ghrls/target/${{ matrix.target }}/release/ghrls artifacts/${{ matrix.target }}/
        cp LICENSE artifacts/${{ matrix.target }}/
        cp README.md artifacts/${{ matrix.target }}/
        cp usage.md artifacts/${{ matrix.target }}/

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.target }}
        path: artifacts/${{ matrix.target }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create release archives
        run: |
          cd artifacts
          for dir in */; do
            target_name=${dir%/}
            tar czf "${target_name}.tar.gz" "$target_name"
            zip -r "${target_name}.zip" "$target_name"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
